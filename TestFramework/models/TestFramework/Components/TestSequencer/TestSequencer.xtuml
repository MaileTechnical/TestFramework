-- BP 7.1.6 content: Component syschar: 3 persistence-version: 7.1.6

INSERT INTO C_C
	VALUES ("6458b090-4d5d-4bec-a376-1c820254581c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'TestSequencer',
	'Summary description:

A service supporting the sequencing of the steps involved in running a suite of test cases.
A test suite contains an ordered set of test buckets.
Each test bucket contains at least one test case; typically several related tests.
A test case consists of one or more sequences of stimuli and following observations.
Multiple sequences of stimuli run concurrently in a test case execution.
A stimulus effects some changes in a system under test.
Following observations may evaluate the response of the system to such a stimulus.
Time delays can be interspersed between stimuli and observations and between observations.
All observations following a stimulus must complete before the next stimulus is injected
If all observations are found acceptable, the test case is deemed to be successful.
If any observation fails, the test case ceases execution: all sequences discontinue.
A test case may be associated with instances of requirements to support coverage reporting.

Discussion:

Typically a self-checking test case has three primary components:
1. Establish pre-conditions.
2. Inject stimulus.
3. Verify post-stimulus conditions.
Often, the injection of stimulus and the verification of post-conditions
are intermixed, as the test case injects a stimulus, verifies the response(s), 
injects additional stimuli, and so on.

This subject matter-independent Test Sequencer service asumes the burdens of sequencing, timer 
management, requirements coverage tracking and summary reporting for multi-threaded test cases 
ordered in test buckets within a test suite.

A testbench, with subject matter-specific details of stimuli and observations, can use this 
Test Sequencer service to manage its interaction with a system under test.

To use the service, a testbench must derive its test bucket, stimuli and observation classes from 
the supertype classes provided in the sample testbench component and use the operations supplied 
in the supertypes to interface with the service.

In principle, a testbench registers a test suite with the service, supplying a name and optionally 
selecting a timescale which will be default for the testcases it will contain. The testbench adds 
test buckets to the suite and populates each bucket with test cases comprised of stimuli and 
observations. A test bucket contains at least one test case, but commonly a number of cases which 
share some common purpose, such as comprehensive testing of a subgroup of requirements. 

Optionally, a testbench can register instances of requirements with the service. There is provision 
for associating any such requirement with one or more test case instances; the service will provide 
a summary report on requirements coverage at completion of testing.

A test case may choose to specify pre-conditions which should be established before the case is run.
This is done by associating an instance of the testbench preconditions class which is configured with 
the desired values and an operation to inject these values when invoked at test case initialization.

As the testbench constructs test cases, using provided operations of the stimulus and observation 
supertypes to add its specific stimuli and observation instances, the sequencer builds corresponding 
sequences in the Test Sequencer service context. 

For each instance of test bucket, stimulus or observation created in the testbench in this way, the 
service returns identifying information which is used to activate those instances when appropriate.

The testbench test bucket, stimulus and observation subtype classes must provide instances which will 
respond to the invocations of injection and observation operations on the supertype when triggered by 
the sequencing service as it works through the series of test cases. 
The supertypes also provide operations to signal responses to the service.

The test cases are created in an instance based operation of a test bucket subtype. This operation 
will be invoked for each test bucket subtype as the sequencer runs through the set of buckets that 
constitute a test suite. The invoked operation creates subtype instances of stimulus and observation 
arranging them in order. Stimuli are added to a stimulus sequence - of which there must be at least 
one created for a test case. If there are multiple sequences of stimuli they will run concurrently.
Observations are each appended to a specific stimulus and may be separated by chosen time delays.

An observation may be configured to poll, repeatedly evaluating system conditions until it completes 
by reporting success, or fails after some time limit. Alternatively, invocation of an evaluation can
be triggered by some specific occurrence in the testbench - such as receipt of a status change in 
the system under test. This is achieved by associating a specific key with the observation; invoking 
a sequence "assess" signal, with a key value, will trigger evaluation of any current observations 
with a matching key. If desired, such an ''asynchronous'' observation may be associated with a separate 
stimulus sequence, allowing other sets of observations to proceed while it waits to be triggered.

Associated with each stimulus sequence there is one interval timer. A stimulus or observation can 
start (or restart) the timer on a sequence. A subsequent observation may read the elapsed time since 
the timer was started - and may optionally reset the timer value to zero on reading. Interval timer 
resolution defaults to that of the test case, but can be overridden.

The provided sample testbench demonstrates the capabilities provided by the test sequencing service.
They include linking pre-conditions and requirements to test cases, chosing time resolution values 
and measuring elapsed time intervals.
',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'');
INSERT INTO GD_MD
	VALUES ("784da6a9-5bb4-4660-8e91-83c54487a1a8",
	111,
	"6458b090-4d5d-4bec-a376-1c820254581c",
	98,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	200,
	150,
	0,
	'4.1.17',
	'TestFramework::Components::TestSequencer');
INSERT INTO GD_GE
	VALUES ("9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d",
	"784da6a9-5bb4-4660-8e91-83c54487a1a8",
	"6458b090-4d5d-4bec-a376-1c820254581c",
	103,
	0,
	'TestFramework::Components::TestSequencer');
INSERT INTO GD_SHP
	VALUES ("9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d");
INSERT INTO GD_CTR
	VALUES ("9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d");
INSERT INTO DIM_ND
	VALUES (672.000000,
	228.000000,
	"9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d");
INSERT INTO DIM_GE
	VALUES (4884.000000,
	0.000000,
	"9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("56536dc8-4dfa-4525-89b7-7b6757fbbc23",
	5321.000000,
	228.000000,
	"9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d");
INSERT INTO GD_GE
	VALUES ("be45084e-f533-4a21-8c55-56281faafbde",
	"784da6a9-5bb4-4660-8e91-83c54487a1a8",
	"9688d51a-0c78-4f2b-b5c4-8da421246f13",
	108,
	0,
	'TestFramework::Components::TestSequencer::TestSequencer');
INSERT INTO GD_SHP
	VALUES ("be45084e-f533-4a21-8c55-56281faafbde");
INSERT INTO GD_NCS
	VALUES ("be45084e-f533-4a21-8c55-56281faafbde");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"be45084e-f533-4a21-8c55-56281faafbde");
INSERT INTO DIM_GE
	VALUES (4908.000000,
	36.000000,
	"be45084e-f533-4a21-8c55-56281faafbde",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("be45084e-f533-4a21-8c55-56281faafbde",
	0,
	"9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d");
INSERT INTO GD_GE
	VALUES ("a8064314-868e-4358-b1b2-8c7e57fa8543",
	"784da6a9-5bb4-4660-8e91-83c54487a1a8",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb",
	94,
	0,
	'TestFramework::Components::TestSequencer::TESTBENCH::TestSequencing');
INSERT INTO GD_CON
	VALUES ("a8064314-868e-4358-b1b2-8c7e57fa8543",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b8c20c7c-a533-4db8-80b0-3b2f66f9183a",
	"a8064314-868e-4358-b1b2-8c7e57fa8543",
	0,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b8c20c7c-a533-4db8-80b0-3b2f66f9183a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b8c20c7c-a533-4db8-80b0-3b2f66f9183a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b8c20c7c-a533-4db8-80b0-3b2f66f9183a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("313e979f-a8c7-4589-b126-a6ec27823988",
	"a8064314-868e-4358-b1b2-8c7e57fa8543",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"313e979f-a8c7-4589-b126-a6ec27823988");
INSERT INTO DIM_GE
	VALUES (5340.000000,
	249.000000,
	"313e979f-a8c7-4589-b126-a6ec27823988",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("313e979f-a8c7-4589-b126-a6ec27823988",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e57bf771-bc58-43a9-bcbf-d6d4641b9cd1",
	"a8064314-868e-4358-b1b2-8c7e57fa8543",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e57bf771-bc58-43a9-bcbf-d6d4641b9cd1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e57bf771-bc58-43a9-bcbf-d6d4641b9cd1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e57bf771-bc58-43a9-bcbf-d6d4641b9cd1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d1766b28-22ab-4be7-8315-1fe05aee883b",
	"a8064314-868e-4358-b1b2-8c7e57fa8543",
	"00000000-0000-0000-0000-000000000000",
	"c0d8d351-fa8e-4015-99cf-3b9f7e07d660",
	"737bda03-27df-44e5-aa63-a194bc075bd9");
INSERT INTO DIM_WAY
	VALUES ("c0d8d351-fa8e-4015-99cf-3b9f7e07d660",
	5321.000000,
	228.000000,
	"a8064314-868e-4358-b1b2-8c7e57fa8543",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("737bda03-27df-44e5-aa63-a194bc075bd9",
	5321.000000,
	306.000000,
	"a8064314-868e-4358-b1b2-8c7e57fa8543",
	"00000000-0000-0000-0000-000000000000",
	"c0d8d351-fa8e-4015-99cf-3b9f7e07d660");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a8064314-868e-4358-b1b2-8c7e57fa8543",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a8064314-868e-4358-b1b2-8c7e57fa8543",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("56536dc8-4dfa-4525-89b7-7b6757fbbc23",
	"00000000-0000-0000-0000-000000000000",
	"a8064314-868e-4358-b1b2-8c7e57fa8543");
INSERT INTO GD_GE
	VALUES ("6c9f2827-3db7-466a-ab7e-2877c98665af",
	"784da6a9-5bb4-4660-8e91-83c54487a1a8",
	"0a55d6bd-e7c8-4286-a6b3-77c525cf64b9",
	108,
	0,
	'TestFramework::Components::TestSequencer::Datatypes');
INSERT INTO GD_SHP
	VALUES ("6c9f2827-3db7-466a-ab7e-2877c98665af");
INSERT INTO GD_NCS
	VALUES ("6c9f2827-3db7-466a-ab7e-2877c98665af");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"6c9f2827-3db7-466a-ab7e-2877c98665af");
INSERT INTO DIM_GE
	VALUES (5124.000000,
	36.000000,
	"6c9f2827-3db7-466a-ab7e-2877c98665af",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c9f2827-3db7-466a-ab7e-2877c98665af",
	0,
	"9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d");
INSERT INTO GD_GE
	VALUES ("febcd5fb-42c2-496b-861b-49889a549cb0",
	"784da6a9-5bb4-4660-8e91-83c54487a1a8",
	"6c66f96e-cbfb-43a4-a1b6-7d3c4c1a96dc",
	108,
	0,
	'TestFramework::Components::TestSequencer::SharedDatatypes');
INSERT INTO GD_SHP
	VALUES ("febcd5fb-42c2-496b-861b-49889a549cb0");
INSERT INTO GD_NCS
	VALUES ("febcd5fb-42c2-496b-861b-49889a549cb0");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"febcd5fb-42c2-496b-861b-49889a549cb0");
INSERT INTO DIM_GE
	VALUES (5344.000000,
	36.000000,
	"febcd5fb-42c2-496b-861b-49889a549cb0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("febcd5fb-42c2-496b-861b-49889a549cb0",
	0,
	"9c0338ad-3e2d-4bf3-adf0-59ce75a4b75d");
INSERT INTO DIM_DIA
	VALUES ("784da6a9-5bb4-4660-8e91-83c54487a1a8",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO C_PO
	VALUES ("88e63b11-f30e-4336-9006-ddc2e129d092",
	"6458b090-4d5d-4bec-a376-1c820254581c",
	'TESTBENCH',
	0,
	0);
INSERT INTO C_IR
	VALUES ("b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	"00000000-0000-0000-0000-000000000000",
	"88e63b11-f30e-4336-9006-ddc2e129d092");
INSERT INTO C_P
	VALUES ("b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb",
	'TestSequencing',
	'SequencingService',
	'',
	'TestSequencer::TESTBENCH::TestSequencing');
INSERT INTO SPR_PEP
	VALUES ("e667499c-febe-4ed8-b50a-b6c59d94caf6",
	"abb1f40e-d7c8-4654-94f5-c0a999c3866a",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("e667499c-febe-4ed8-b50a-b6c59d94caf6",
	'InjectStimulus',
	'Invoke injection of the identified stimulus in the test bench.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("abb1f40e-d7c8-4654-94f5-c0a999c3866a",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'InjectStimulus',
	'Invoke injection of the identified stimulus in the test bench.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("1825ae0d-c6d8-4668-889a-1ad4c836840e",
	"ed6e0575-1418-4e51-82ef-2f3bf15fbb57",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("1825ae0d-c6d8-4668-889a-1ad4c836840e",
	'TriggerObservation',
	'Invoke evaluation of the identified observation in the test bench.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("ed6e0575-1418-4e51-82ef-2f3bf15fbb57",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'TriggerObservation',
	'Invoke evaluation of the identified observation in the test bench.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("a144cc99-8018-496c-b5f1-43590dbdc1f2",
	"5df7def7-0028-4dc9-8578-87518097d737",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("a144cc99-8018-496c-b5f1-43590dbdc1f2",
	'ObservationDone',
	'Report to the Test sequencer service that an observation has completed.',
	'select any obs from instances of Observation 
  where ( selected.assignedID == param.observationId );
if ( not_empty obs )
  obs.ReportedDone( success:param.success );
else
  LOG::LogFailure( message:"SEQ Invalid observation identifier" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("5df7def7-0028-4dc9-8578-87518097d737",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'ObservationDone',
	'Report to the Test sequencer service that an observation has completed.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("0c970a85-3b51-4321-9546-029ad19a46c4",
	"b5ee9925-8760-47c6-a3ea-734b7d165169",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("0c970a85-3b51-4321-9546-029ad19a46c4",
	'InitializeTestCase',
	'Testbench receives notification that a new test case has been selected to run.
Initialize any pre-conditions and respond when ready for stimulus injection.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("b5ee9925-8760-47c6-a3ea-734b7d165169",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'InitializeTestCase',
	'Testbench receives notification that a new test case has been selected to run.
Initialize any pre-conditions and respond when ready for stimulus injection.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("402e4606-8235-4fca-9a70-4db16466eadf",
	"ef029a3f-8bbc-4d01-b248-9d10545d4527",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("402e4606-8235-4fca-9a70-4db16466eadf",
	'StimulusDone',
	'Respond with this signal when all observations for an executed stimulus are complete.',
	'select any stimulus from instances of Stimulus
  where (selected.assignedID == param.stimulusId );
if ( not_empty stimulus )
  generate Stimulus2:DoObservation to stimulus;
else
  LOG::LogFailure( message:"SEQ Invalid stimulus identifier" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("ef029a3f-8bbc-4d01-b248-9d10545d4527",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'StimulusDone',
	'Respond with this signal when all observations for an executed stimulus are complete.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("155f99c9-a228-4562-84bf-b6b327ded939",
	"976b6c82-6628-4a51-b78f-8a11577ec800",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("155f99c9-a228-4562-84bf-b6b327ded939",
	'TestCaseInitialized',
	'Report back to the Test sequencer service that a testbench test case has completed initialization.
This will initiate stimiuli injection, and thus observation reporting, for a test case.
If the test case has more than one test sequence, these will start in parallel.',
	'select any tc from instances of TestCase
  where ( selected.testCaseLabel == param.caseLabel );
if ( not_empty tc )
  generate TestCase2:Execute to tc;
else
  LOG::LogFailure( message:"SEQ Invalid test case identifier" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("976b6c82-6628-4a51-b78f-8a11577ec800",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'TestCaseInitialized',
	'Report back to the Test sequencer service that a testbench test case has completed initialization.
This will initiate stimiuli injection, and thus observation reporting, for a test case.
If the test case has more than one test sequence, these will start in parallel.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("c711a80f-d68a-4639-af8a-071ddc7ece4e",
	"b5a796ca-6082-48ac-92dd-efc0a0922ce7",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("c711a80f-d68a-4639-af8a-071ddc7ece4e",
	'Assess',
	'On this signal, any active observations with matching key value will be triggered to re-evaluate.',
	'select any trigger from instances of Trigger
 where ( selected.KeyValue == param.key );
if ( empty trigger )
  LOG::LogFailure( message:"No observation is waiting for trigger " + param.key );
  return;
end if;
trigger.TriggerObservations( fire:True );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("b5a796ca-6082-48ac-92dd-efc0a0922ce7",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'Assess',
	'On this signal, any active observations with matching key value will be triggered to re-evaluate.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("8aa0458d-710a-45da-b6f7-10abcb03e1f4",
	"c7c36dbc-1771-40f5-9e73-c713d789f49a",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("8aa0458d-710a-45da-b6f7-10abcb03e1f4",
	'LinkRequirement',
	'Indicate that the given requirement is (partially) tested by the given test case.
This is used for test coverage reporting.',
	'Requirement::Link( reqPrefix:param.reqPrefix, reqNumber:param.reqNumber, caseLabel:param.caseLabel );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("c7c36dbc-1771-40f5-9e73-c713d789f49a",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'LinkRequirement',
	'Indicate that the given requirement is (partially) tested by the given test case.
This is used for test coverage reporting.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("adce7267-3a0f-4418-92f3-f7c30d4b189d",
	"acaa32df-c46b-4fb9-8a4d-e3da8ab0716a",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("adce7267-3a0f-4418-92f3-f7c30d4b189d",
	'RunTestSuite',
	'Run the sequence of test buckets associated with the singleton test suite.',
	'select any ts from instances of TestSuite;
if ( not_empty ts )
  LOG::LogInfo( message:"SEQ Test sequencer starting test suite" );
  ts.RunTests();
else
  LOG::LogFailure( message:"SEQ No test suite registered" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("acaa32df-c46b-4fb9-8a4d-e3da8ab0716a",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'RunTestSuite',
	'Run the sequence of test buckets associated with the singleton test suite.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("21fd2230-5946-468c-9d06-29dbdc7fc0dd",
	"2410fcc8-0433-44ba-8e92-f529a7ae4e7d",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("21fd2230-5946-468c-9d06-29dbdc7fc0dd",
	'MakeRequirement',
	'Create an instance of a requirement which may be linked to test cases for coverage reporting.',
	'Requirement::Create( reqPrefix:param.reqPrefix, 
                     reqNumber:param.reqNumber, 
                     reqRemark:param.reqRemark );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("2410fcc8-0433-44ba-8e92-f529a7ae4e7d",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'MakeRequirement',
	'Create an instance of a requirement which may be linked to test cases for coverage reporting.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("adaf24ba-f1bf-40c7-8ac6-3feffe99e888",
	"b7c0a071-0d7d-4ad9-9d92-4170a9db8b0d",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("adaf24ba-f1bf-40c7-8ac6-3feffe99e888",
	'BucketInitialized',
	'Indicate to the test sequencer that the current test bucket is ready to run test cases.
',
	'select any bucket from instances of TestBucket
  where ( selected.assignedID == param.bucketId );
if ( not_empty bucket )
  generate TestBucket1:RunBucket to bucket;
else
  LOG::LogFailure( message:"SEQ Invalid test bucket identifier" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("b7c0a071-0d7d-4ad9-9d92-4170a9db8b0d",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'BucketInitialized',
	'Indicate to the test sequencer that the current test bucket is ready to run test cases.
',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("e7fc3011-ec5c-4853-98fa-5f103deea045",
	"14882a87-5828-4191-a273-30b8788f3566",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("e7fc3011-ec5c-4853-98fa-5f103deea045",
	'InitializeBucket',
	'Signals a test bucket to instantiate its test case sequences.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("14882a87-5828-4191-a273-30b8788f3566",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'InitializeBucket',
	'Signals a test bucket to instantiate its test case sequences.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("085012bf-0159-480c-a014-aa649b445754",
	"581dc69f-0c98-4ab6-baf0-a03c367e212f",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("085012bf-0159-480c-a014-aa649b445754",
	'InsertDelay',
	'Request the test sequencer to include a timed delay before invoking the next stimulus or observation.
For observations, consider using the polling capability which can repeatedly evaluate with delays.',
	'Observation::Add( seqLabel:param.seqLabel, 
                     observationId:param.observationId,
                     pollInterval:0,
                     durationLimit:param.duration,
                     triggerKey:"",
                     concurrent:False,
                     isDelay:True );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("581dc69f-0c98-4ab6-baf0-a03c367e212f",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'InsertDelay',
	'Request the test sequencer to include a timed delay before invoking the next stimulus or observation.
For observations, consider using the polling capability which can repeatedly evaluate with delays.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("8ee8d8f2-7673-47d8-90a7-2de30df09f47",
	"bb4f4c38-32d2-41f1-a540-93e7d083ed70",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("8ee8d8f2-7673-47d8-90a7-2de30df09f47",
	'StartIntervalTimer',
	'A stimulus may request start of the interval timer linked to its test sequence.',
	'select any stimulus from instances of Stimulus
  where ( selected.assignedID == param.stimulusId );
if ( not_empty stimulus )
  stimulus.StartIntervalTimer();
else
  LOG::LogFailure( message:"SEQ Invalid stimulus identifier" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("bb4f4c38-32d2-41f1-a540-93e7d083ed70",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'StartIntervalTimer',
	'A stimulus may request start of the interval timer linked to its test sequence.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("c2c9fed3-caa4-474a-b9ba-745c54d81fab",
	"8dd429c8-69fa-400e-93ff-d0db0ee2302a",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("c2c9fed3-caa4-474a-b9ba-745c54d81fab",
	'DeletePreCondition',
	'Signals the testbench that the identified precodition instance can be disposed of.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("8dd429c8-69fa-400e-93ff-d0db0ee2302a",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'DeletePreCondition',
	'Signals the testbench that the identified precodition instance can be disposed of.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("ef42a107-8de0-4f6c-b55d-75da2f9f82b5",
	"d5a4cf86-3f41-407c-831c-18e679999a67",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("ef42a107-8de0-4f6c-b55d-75da2f9f82b5",
	'DeleteStimulus',
	'Signals the testbench that the identified stimulus sub/supertype can be disposed of.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("d5a4cf86-3f41-407c-831c-18e679999a67",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'DeleteStimulus',
	'Signals the testbench that the identified stimulus sub/supertype can be disposed of.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("4dabdc55-681d-4930-b270-9d40eb4db8fb",
	"e3261067-756f-427b-94ca-307412068ce6",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("4dabdc55-681d-4930-b270-9d40eb4db8fb",
	'DeleteTestBucket',
	'Signals the testbench that the identified test bucket sub/supertype can be disposed of.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("e3261067-756f-427b-94ca-307412068ce6",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'DeleteTestBucket',
	'Signals the testbench that the identified test bucket sub/supertype can be disposed of.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("8f6ffb50-c347-4c7a-b8c6-5fe63c9eba11",
	"b1465433-efc9-45bd-ad88-e5ead4500931",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("8f6ffb50-c347-4c7a-b8c6-5fe63c9eba11",
	'RegisterTestSuite',
	'A single instance of test suite must be created, to which will be added test bucket(s) containing test case(s).',
	'TestSuite::Register( suiteLabel:param.suiteLabel, retainAll:param.keepAllCases );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("b1465433-efc9-45bd-ad88-e5ead4500931",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'RegisterTestSuite',
	'A single instance of test suite must be created, to which will be added test bucket(s) containing test case(s).',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("6bff7eb3-2b23-43a3-9f4f-385237af3b21",
	"a65ba45b-40f5-486e-9280-968e92d5d402",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("6bff7eb3-2b23-43a3-9f4f-385237af3b21",
	'DeleteObservation',
	'Signals the testbench that the identified observation sub/supertype can be disposed of.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("a65ba45b-40f5-486e-9280-968e92d5d402",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'DeleteObservation',
	'Signals the testbench that the identified observation sub/supertype can be disposed of.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("7283d351-5756-46a2-abed-e15db5caef39",
	"43da9421-f19f-491d-b0de-6d07de88d215",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("7283d351-5756-46a2-abed-e15db5caef39",
	'NameTestBucket',
	'Assign an optional arbitrary naming label to a test bucket instance.',
	'select any bucket from instances of TestBucket
  where ( selected.assignedID == param.bucketId );
if ( not_empty bucket )
  bucket.bucketLabel = param.bucketLabel;
else
  LOG::LogFailure( message:"SEQ Invalid test bucket identifier" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("43da9421-f19f-491d-b0de-6d07de88d215",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'NameTestBucket',
	'Assign an optional arbitrary naming label to a test bucket instance.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("3e8dfde7-e47d-444d-885f-ca13fcadf6f3",
	"2ab9bd8f-a044-44bc-b988-74be588a3af7",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("3e8dfde7-e47d-444d-885f-ca13fcadf6f3",
	'TestSuiteComplete',
	'Signals completion of the test suite.',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("2ab9bd8f-a044-44bc-b988-74be588a3af7",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'TestSuiteComplete',
	'Signals completion of the test suite.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("47c31571-058c-4076-a86c-dd5664066a39",
	"3ab9f7fe-b572-4c34-98f5-076122029206",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("47c31571-058c-4076-a86c-dd5664066a39",
	'AddBucket',
	'Add an instance of a test bucket to the test suite.',
	'TestSuite::AddBucket( bucketId:param.ID );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("3ab9f7fe-b572-4c34-98f5-076122029206",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'AddBucket',
	'Add an instance of a test bucket to the test suite.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("512103c3-042b-4914-806f-465617768e34",
	"338f43fc-f8fd-4707-98a1-be43d1ec3394",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("512103c3-042b-4914-806f-465617768e34",
	'CreateTestCase',
	'Add an instance of a test case, identified by label, to the indicated test bucket.',
	'if ( param.caseLabel == "" )
  LOG::LogFailure( message:"SEQ New test case label required" );
  return;
end if;
select any case from instances of TestCase
 where ( selected.testCaseLabel == param.caseLabel );
if ( not_empty case )
  LOG::LogFailure( message:"Test case with this label already exists" );
  return;
end if;
select any bucket from instances of TestBucket
  where ( selected.assignedID == param.bucketId );
if ( not_empty bucket )
  bucket.AddTestCase( caseLabel:param.caseLabel );
else
  LOG::LogFailure( message:"SEQ Invalid test bucket identifier" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("338f43fc-f8fd-4707-98a1-be43d1ec3394",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'CreateTestCase',
	'Add an instance of a test case, identified by label, to the indicated test bucket.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("8a572599-520f-4fb5-b9ce-54781221ca86",
	"ccdf5756-d7fc-4bb0-9a09-adbbe404ef3d",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("8a572599-520f-4fb5-b9ce-54781221ca86",
	'AddStimulus',
	'',
	'Stimulus::Append( seqLabel:param.seqLabel, stimulusId:param.stimulusId );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("ccdf5756-d7fc-4bb0-9a09-adbbe404ef3d",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'AddStimulus',
	'',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("9a12b970-7867-4d86-91e4-304e0af6a38d",
	"db8e25d9-f7a5-4738-85a0-ef4adc5bf3f2",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("9a12b970-7867-4d86-91e4-304e0af6a38d",
	'AddObservation',
	'Add an observation to follow injection of a specified stimulus.',
	'Observation::Add( seqLabel:param.seqLabel, 
                  observationId:param.observationId,
                  pollInterval:param.pollInterval,
                  durationLimit:param.pollDuration,
                  triggerKey:param.eventKey,
                  concurrent:param.concurrent,
                  isDelay:False );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("db8e25d9-f7a5-4738-85a0-ef4adc5bf3f2",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'AddObservation',
	'Add an observation to follow injection of a specified stimulus.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("a7fd58ce-2f1a-4180-a410-8e39062d165b",
	"80b50e27-14fc-4cf7-9830-ef2a7c77d6fa",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("a7fd58ce-2f1a-4180-a410-8e39062d165b",
	'RequestIntervalTimerValue',
	'An observation may request the value of the interval timer associated with its stimulus sequence.
The value will be signalled back to the testbench, along with the supplied identification key.
Optionally, the timer can be reset.',
	'select any obs from instances of Observation
 where ( selected.assignedID == param.observationId );
if ( not_empty obs )
  obs.ReadIntervalTimer( key:param.key, reset:param.reset );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("80b50e27-14fc-4cf7-9830-ef2a7c77d6fa",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'RequestIntervalTimerValue',
	'An observation may request the value of the interval timer associated with its stimulus sequence.
The value will be signalled back to the testbench, along with the supplied identification key.
Optionally, the timer can be reset.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("e8daef11-107e-4232-84d4-0610afd32558",
	"7c394270-a8ad-44af-a4ad-8601e7eebc96",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("e8daef11-107e-4232-84d4-0610afd32558",
	'IntervalTimerValue',
	'',
	'',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("7c394270-a8ad-44af-a4ad-8601e7eebc96",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'IntervalTimerValue',
	'',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("00b40b43-eb10-49f4-8f08-a6dd5cde9967",
	"d69685a1-d173-411e-954d-82338177cf09",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("00b40b43-eb10-49f4-8f08-a6dd5cde9967",
	'AddStimulusSequence',
	'A test case can have one or more labeled sequences of stimuli.
A labelled sequence will be added to the test case currently being constructed.
These sequences may run in parallel and may interact via assess signals.',
	'// A new stimulus sequence will be added to the test case currently being ''scripted''
select any suite from instances of TestSuite;
select one case related by suite->TestCase[R124.''is currently building''];
if ( empty case )
  LOG::LogFailure( message:"SEQ No test case currently being assembled" );
  return;
end if;
select any seq related by case->StimulusSequence[R119.''executes'']
 where ( selected.seqLabel == param.seqLabel );
if ( not_empty seq )
  LOG::LogFailure( message:" SEQ Sequence label must be unique within test case" );
  return;
end if;
case.AttachSequence( seqLabel:param.seqLabel );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("d69685a1-d173-411e-954d-82338177cf09",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'AddStimulusSequence',
	'A test case can have one or more labeled sequences of stimuli.
A labelled sequence will be added to the test case currently being constructed.
These sequences may run in parallel and may interact via assess signals.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("7d52ac6c-99e0-40be-8abe-5dd4027a72a5",
	"ca057380-3763-49be-a902-4f89bd14277c",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("7d52ac6c-99e0-40be-8abe-5dd4027a72a5",
	'CancelTriggeredObservation',
	'On this signal, any active observations with matching key value will be canceled.
This has the effect of completing the observation without a failure penalty.',
	'select any trigger from instances of Trigger
 where ( selected.KeyValue == param.key );
if ( empty trigger )
  LOG::LogFailure( message:"No observation is waiting for trigger " + param.key );
  return;
end if;
trigger.TriggerObservations( fire:False );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("ca057380-3763-49be-a902-4f89bd14277c",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'CancelTriggeredObservation',
	'On this signal, any active observations with matching key value will be canceled.
This has the effect of completing the observation without a failure penalty.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("d8c0e7cd-e935-473f-8893-2d13ddf22e22",
	"de9c9d7b-2d7a-4144-923a-4f0477575d03",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("d8c0e7cd-e935-473f-8893-2d13ddf22e22",
	'SetTestBucketResolution',
	'Test buckets inherit a default resolution from the test suite; this can be overridden.',
	'select any bucket from instances of TestBucket
  where ( selected.assignedID == param.bucketId );
if ( not_empty bucket )
  bucket.SetTimerResolution( resolution:param.resolution );
else
  LOG::LogFailure( message:"SEQ Invalid test bucket identifier" );
end if;
',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("de9c9d7b-2d7a-4144-923a-4f0477575d03",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'SetTestBucketResolution',
	'Test buckets inherit a default resolution from the test suite; this can be overridden.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("046d1896-4f88-4f5f-9ef7-d7b8ab8b8857",
	"092a77de-9124-470e-9e04-e55568aebdc9",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("046d1896-4f88-4f5f-9ef7-d7b8ab8b8857",
	'SetSequenceResolution',
	'Test sequences inherit a default resolution from the test bucket; this can be overridden.',
	'select any suite from instances of TestSuite;
select one case related by suite->TestCase[R124.''is currently building''];
select any seq related by case ->StimulusSequence[R119.''executes'']
 where ( selected.seqLabel == param.seqLabel );
if ( empty seq )
  LOG::LogFailure( message:"No sequence found matching " + param.seqLabel );
end if;
seq.SetSequenceResolution( resolution:param.resolution );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("092a77de-9124-470e-9e04-e55568aebdc9",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'SetSequenceResolution',
	'Test sequences inherit a default resolution from the test bucket; this can be overridden.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("2ebed635-f6ff-4aef-b302-2c270c93aabb",
	"168e2aad-1615-4146-ac35-e977e2dbf6c5",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("2ebed635-f6ff-4aef-b302-2c270c93aabb",
	'SetTestSuiteResolution',
	'Set the timer resolution which will be default for the test buckets in this test suite.',
	'select any ts from instances of TestSuite;
if ( not_empty ts )
  ts.timerResolution = param.resolution;
else
  LOG::LogFailure( message:"SEQ No test suite exists!" );
end if;',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("168e2aad-1615-4146-ac35-e977e2dbf6c5",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'SetTestSuiteResolution',
	'Set the timer resolution which will be default for the test buckets in this test suite.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO SPR_PEP
	VALUES ("2d634a28-7315-4bba-9d3d-481e0ece2eb7",
	"80147fc1-3758-4e4b-b996-66d26cfeffd2",
	"b0b3c5e8-7447-4dbd-98da-8a1ba11cf9fb");
INSERT INTO SPR_PS
	VALUES ("2d634a28-7315-4bba-9d3d-481e0ece2eb7",
	'SetTestCaseResolution',
	'Test sequences inherit a default resolution from the test bucket; this can be overridden.',
	'select any suite from instances of TestSuite;
select one case related by suite->TestCase[R124.''is currently building''];
if ( empty case )
  LOG::LogFailure( message:"No test case found matching " + param.caseLabel );
end if;
case.SetTimerResolution( resolution:param.resolution );',
	1,
	0);
INSERT INTO C_EP_PROXY
	VALUES ("80147fc1-3758-4e4b-b996-66d26cfeffd2",
	"eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	-1,
	'SetTestCaseResolution',
	'Test sequences inherit a default resolution from the test bucket; this can be overridden.',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO C_I_PROXY
	VALUES ("eff7aa83-70b9-46a6-bfc0-08d66d36431e",
	"00000000-0000-0000-0000-000000000000",
	'TestSequencing',
	'',
	'../../Interfaces/TestSequencing/TestSequencing.xtuml');
INSERT INTO PE_PE
	VALUES ("6458b090-4d5d-4bec-a376-1c820254581c",
	1,
	"61588b75-4667-4ddf-bf35-32b85d2f22dd",
	"00000000-0000-0000-0000-000000000000",
	2);
INSERT INTO EP_PKG_PROXY
	VALUES ("61588b75-4667-4ddf-bf35-32b85d2f22dd",
	"b06a8228-7533-46d6-b644-27cf49555288",
	"b06a8228-7533-46d6-b644-27cf49555288",
	'Components',
	'',
	0,
	'../Components.xtuml');
