-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("0a55d6bd-e7c8-4286-a6b3-77c525cf64b9",
	"00000000-0000-0000-0000-000000000000",
	"b06a8228-7533-46d6-b644-27cf49555288",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("756cb780-4e1a-403e-a7a4-b06484eebd50",
	112,
	"0a55d6bd-e7c8-4286-a6b3-77c525cf64b9",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	200,
	150,
	0,
	'',
	'TestFramework::Components::TestSequencer::Datatypes');
INSERT INTO GD_GE
	VALUES ("4bd8400b-aaea-4431-be74-a5a24207743d",
	"756cb780-4e1a-403e-a7a4-b06484eebd50",
	"bded8be3-2861-4b45-a7e9-cb2255edaadc",
	109,
	0,
	'TestFramework::Components::TestSequencer::Datatypes::timerScaleFactors');
INSERT INTO GD_SHP
	VALUES ("4bd8400b-aaea-4431-be74-a5a24207743d");
INSERT INTO GD_NCS
	VALUES ("4bd8400b-aaea-4431-be74-a5a24207743d");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"4bd8400b-aaea-4431-be74-a5a24207743d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4bd8400b-aaea-4431-be74-a5a24207743d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4bd8400b-aaea-4431-be74-a5a24207743d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("4e97dda7-b6bf-4803-b688-89562668dea7",
	"756cb780-4e1a-403e-a7a4-b06484eebd50",
	"f118c998-732a-4398-a820-4480fa8cdb21",
	52,
	0,
	'TestFramework::Components::TestSequencer::Datatypes::tsStatus');
INSERT INTO GD_SHP
	VALUES ("4e97dda7-b6bf-4803-b688-89562668dea7");
INSERT INTO GD_NCS
	VALUES ("4e97dda7-b6bf-4803-b688-89562668dea7");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"4e97dda7-b6bf-4803-b688-89562668dea7");
INSERT INTO DIM_GE
	VALUES (220.000000,
	0.000000,
	"4e97dda7-b6bf-4803-b688-89562668dea7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4e97dda7-b6bf-4803-b688-89562668dea7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("756cb780-4e1a-403e-a7a4-b06484eebd50",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DT
	VALUES ("f118c998-732a-4398-a820-4480fa8cdb21",
	"00000000-0000-0000-0000-000000000000",
	'tsStatus',
	'',
	'');
INSERT INTO S_EDT
	VALUES ("f118c998-732a-4398-a820-4480fa8cdb21");
INSERT INTO S_ENUM
	VALUES ("e97954b6-ad67-4097-8f63-6ee04dcc4a2a",
	'created',
	'',
	"f118c998-732a-4398-a820-4480fa8cdb21",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_ENUM
	VALUES ("0bc7b0ab-9856-4f1d-9b1c-153ef1f84f32",
	'started',
	'',
	"f118c998-732a-4398-a820-4480fa8cdb21",
	"e97954b6-ad67-4097-8f63-6ee04dcc4a2a");
INSERT INTO S_ENUM
	VALUES ("246d264d-b5e3-4c0a-8edf-cac26e0b843b",
	'timedout',
	'',
	"f118c998-732a-4398-a820-4480fa8cdb21",
	"426bae61-a8e2-4e95-ba99-93b2615c7f15");
INSERT INTO S_ENUM
	VALUES ("05ecd1e6-b55b-40fb-8d0c-79ec43bb33bb",
	'failed',
	'',
	"f118c998-732a-4398-a820-4480fa8cdb21",
	"246d264d-b5e3-4c0a-8edf-cac26e0b843b");
INSERT INTO S_ENUM
	VALUES ("cc1be859-f8ee-424b-b475-1b9b4ba2ab34",
	'completed',
	'',
	"f118c998-732a-4398-a820-4480fa8cdb21",
	"05ecd1e6-b55b-40fb-8d0c-79ec43bb33bb");
INSERT INTO S_ENUM
	VALUES ("426bae61-a8e2-4e95-ba99-93b2615c7f15",
	'triggered',
	'',
	"f118c998-732a-4398-a820-4480fa8cdb21",
	"0bc7b0ab-9856-4f1d-9b1c-153ef1f84f32");
INSERT INTO PE_PE
	VALUES ("f118c998-732a-4398-a820-4480fa8cdb21",
	1,
	"0a55d6bd-e7c8-4286-a6b3-77c525cf64b9",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO CNST_CSP
	VALUES ("bded8be3-2861-4b45-a7e9-cb2255edaadc",
	'timerScaleFactors',
	'');
INSERT INTO CNST_SYC
	VALUES ("e3442f2a-0fec-4b2b-b91a-5146b5389adf",
	'MicroToMilliseconds',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	"bded8be3-2861-4b45-a7e9-cb2255edaadc",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LFSC
	VALUES ("e3442f2a-0fec-4b2b-b91a-5146b5389adf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LSC
	VALUES ("e3442f2a-0fec-4b2b-b91a-5146b5389adf",
	"00000000-0000-0000-0000-000000000000",
	'1000');
INSERT INTO CNST_SYC
	VALUES ("919e040a-dd79-4e48-b14c-d14c60d74d4e",
	'MicroToSeconds',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	"bded8be3-2861-4b45-a7e9-cb2255edaadc",
	"e3442f2a-0fec-4b2b-b91a-5146b5389adf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LFSC
	VALUES ("919e040a-dd79-4e48-b14c-d14c60d74d4e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LSC
	VALUES ("919e040a-dd79-4e48-b14c-d14c60d74d4e",
	"00000000-0000-0000-0000-000000000000",
	'1000000');
INSERT INTO CNST_SYC
	VALUES ("3d642916-0da9-41b4-ba03-7f719c2305c2",
	'SecondsToMinutes',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	"bded8be3-2861-4b45-a7e9-cb2255edaadc",
	"919e040a-dd79-4e48-b14c-d14c60d74d4e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LFSC
	VALUES ("3d642916-0da9-41b4-ba03-7f719c2305c2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LSC
	VALUES ("3d642916-0da9-41b4-ba03-7f719c2305c2",
	"00000000-0000-0000-0000-000000000000",
	'60');
INSERT INTO CNST_SYC
	VALUES ("0c543c0b-85fc-4806-87e5-5b33c7c21f87",
	'MinuteToHours',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	"bded8be3-2861-4b45-a7e9-cb2255edaadc",
	"3d642916-0da9-41b4-ba03-7f719c2305c2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LFSC
	VALUES ("0c543c0b-85fc-4806-87e5-5b33c7c21f87",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO CNST_LSC
	VALUES ("0c543c0b-85fc-4806-87e5-5b33c7c21f87",
	"00000000-0000-0000-0000-000000000000",
	'60');
INSERT INTO PE_PE
	VALUES ("bded8be3-2861-4b45-a7e9-cb2255edaadc",
	1,
	"0a55d6bd-e7c8-4286-a6b3-77c525cf64b9",
	"00000000-0000-0000-0000-000000000000",
	10);
INSERT INTO PE_PE
	VALUES ("0a55d6bd-e7c8-4286-a6b3-77c525cf64b9",
	1,
	"00000000-0000-0000-0000-000000000000",
	"6458b090-4d5d-4bec-a376-1c820254581c",
	7);
INSERT INTO C_C_PROXY
	VALUES ("6458b090-4d5d-4bec-a376-1c820254581c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'TestSequencer',
	'Summary description:

A service supporting the sequencing of the steps involved in running a suite of test cases.
A test suite contains an ordered set of test buckets.
Each test bucket contains at least one test case; typically several related tests.
A test case consists of one or more sequences of stimuli and following observations.
Multiple sequences of stimuli run concurrently in a test case execution.
A stimulus effects some changes in a system under test.
Following observations may evaluate the response of the system to such a stimulus.
Time delays can be interspersed between stimuli and observations and between observations.
All observations following a stimulus must complete before the next stimulus is injected
If all observations are found acceptable, the test case is deemed to be successful.
If any observation fails, the test case ceases execution: all sequences discontinue.
A test case may be associated with instances of requirements to support coverage reporting.

Discussion:

Typically a self-checking test case has three primary components:
1. Establish pre-conditions.
2. Inject stimulus.
3. Verify post-stimulus conditions.
Often, the injection of stimulus and the verification of post-conditions
are intermixed, as the test case injects a stimulus, verifies the response(s), 
injects additional stimuli, and so on.

This subject matter-independent Test Sequencer service asumes the burdens of sequencing, timer 
management, requirements coverage tracking and summary reporting for multi-threaded test cases 
ordered in test buckets within a test suite.

A testbench, with subject matter-specific details of stimuli and observations, can use this 
Test Sequencer service to manage its interaction with a system under test.

To use the service, a testbench must derive its test bucket, stimuli and observation classes from 
the supertype classes provided in the sample testbench component and use the operations supplied 
in the supertypes to interface with the service.

In principle, a testbench registers a test suite with the service, supplying a name and optionally 
selecting a timescale which will be default for the testcases it will contain. The testbench adds 
test buckets to the suite and populates each bucket with test cases comprised of stimuli and 
observations. A test bucket contains at least one test case, but commonly a number of cases which 
share some common purpose, such as comprehensive testing of a subgroup of requirements. 

Optionally, a testbench can register instances of requirements with the service. There is provision 
for associating any such requirement with one or more test case instances; the service will provide 
a summary report on requirements coverage at completion of testing.

A test case may choose to specify pre-conditions which should be established before the case is run.
This is done by associating an instance of the testbench preconditions class which is configured with 
the desired values and an operation to inject these values when invoked at test case initialization.

As the testbench constructs test cases, using provided operations of the stimulus and observation 
supertypes to add its specific stimuli and observation instances, the sequencer builds corresponding 
sequences in the Test Sequencer service context. 

For each instance of test bucket, stimulus or observation created in the testbench in this way, the 
service returns identifying information which is used to activate those instances when appropriate.

The testbench test bucket, stimulus and observation subtype classes must provide instances which will 
respond to the invocations of injection and observation operations on the supertype when triggered by 
the sequencing service as it works through the series of test cases. 
The supertypes also provide operations to signal responses to the service.

The test cases are created in an instance based operation of a test bucket subtype. This operation 
will be invoked for each test bucket subtype as the sequencer runs through the set of buckets that 
constitute a test suite. The invoked operation creates subtype instances of stimulus and observation 
arranging them in order. Stimuli are added to a stimulus sequence - of which there must be at least 
one created for a test case. If there are multiple sequences of stimuli they will run concurrently.
Observations are each appended to a specific stimulus and may be separated by chosen time delays.

An observation may be configured to poll, repeatedly evaluating system conditions until it completes 
by reporting success, or fails after some time limit. Alternatively, invocation of an evaluation can
be triggered by some specific occurrence in the testbench - such as receipt of a status change in 
the system under test. This is achieved by associating a specific key with the observation; invoking 
a sequence "assess" signal, with a key value, will trigger evaluation of any current observations 
with a matching key. If desired, such an ''asynchronous'' observation may be associated with a separate 
stimulus sequence, allowing other sets of observations to proceed while it waits to be triggered.

Associated with each stimulus sequence there is one interval timer. A stimulus or observation can 
start (or restart) the timer on a sequence. A subsequent observation may read the elapsed time since 
the timer was started - and may optionally reset the timer value to zero on reading. Interval timer 
resolution defaults to that of the test case, but can be overridden.

The provided sample testbench demonstrates the capabilities provided by the test sequencing service.
They include linking pre-conditions and requirements to test cases, chosing time resolution values 
and measuring elapsed time intervals.
',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'../TestSequencer.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("b06a8228-7533-46d6-b644-27cf49555288",
	'TestFramework',
	1,
	'../../../TestFramework.xtuml');
